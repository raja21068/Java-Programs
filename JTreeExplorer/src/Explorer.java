import java.io.File;
import javax.swing.JTree;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeExpansionListener;
import javax.swing.tree.DefaultMutableTreeNode;

public class Explorer extends javax.swing.JFrame {

    JTree mainTree=new JTree();
    /** Creates new form Explorer */
    public Explorer() {
        initComponents();
        mainTree.addTreeExpansionListener(new TreeExpansionListener(){

            @Override
            public void treeExpanded(TreeExpansionEvent event) {
                System.out.println("Expand");
//                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void treeCollapsed(TreeExpansionEvent event) {
                System.out.println("colapsed");
//                throw new UnsupportedOperationException("Not supported yet.");
            }
        
        });
    }

    /** This metthod is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboBox = new javax.swing.JComboBox();
        refreshButton = new javax.swing.JButton();
        treeScrollPane = new javax.swing.JScrollPane();
        listScrollPane = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 400));
        getContentPane().setLayout(null);

        comboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxItemStateChanged(evt);
            }
        });
        getContentPane().add(comboBox);
        comboBox.setBounds(20, 10, 110, 22);

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        getContentPane().add(refreshButton);
        refreshButton.setBounds(140, 10, 90, 25);
        getContentPane().add(treeScrollPane);
        treeScrollPane.setBounds(20, 40, 140, 270);

        listScrollPane.setViewportView(fileList);

        getContentPane().add(listScrollPane);
        listScrollPane.setBounds(170, 40, 180, 270);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        comboBox.removeAllItems();
        File[] directory=new File("C:\\").listRoots();
        for(int i=0;i<directory.length;i++)
            comboBox.addItem(directory[i].toString());
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void comboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxItemStateChanged
        // TODO add your handling code here:
        if(evt.getSource()==null)return;
        new Thread(){
            public void run(){
               String s = (String)comboBox.getSelectedItem();
               System.out.println(s);
               DefaultMutableTreeNode node=new DefaultMutableTreeNode("D:/");
               mainDirectory(node);
               mainTree = new JTree(node);
               
             
            treeScrollPane.getViewport().removeAll();
            treeScrollPane.getViewport().add(mainTree);          
            }
        }.start();
           
       
    }//GEN-LAST:event_comboBoxItemStateChanged
private void mainDirectory(DefaultMutableTreeNode tNode){
            String src=tNode.toString();
            
            String[] files= new File(src).list();
            System.out.println(files.length);
           
            for (int i=0;i<files.length;i++){
                
               System.out.println(src+files[i]);
                if(new File(src+files[i]).isFile()){
                    System.out.println(files[i]);
                   tNode.add(new DefaultMutableTreeNode(files[i]));
                }
                else{
                     if(!(new File(src+files[i]).isHidden())){
                     DefaultMutableTreeNode n = new DefaultMutableTreeNode(files[i]);
                    dirHelp(src+files[i] , n);
                    tNode.add(n);}
                    
                }
            }
            
        }
        private void dirHelp(String src , DefaultMutableTreeNode node){
            System.out.println(src);
            try{
            String files[]=new File(src).list();
 
            for(int i=0;i<files.length;i++){
                if(new File(src+"/"+files[i]).isFile()){
                    System.out.println(files[i]);
                    node.add(new DefaultMutableTreeNode(files[i]));
                }
                else {
                    
                    DefaultMutableTreeNode no=new DefaultMutableTreeNode(files[i]);
                    dirHelp(src+"/"+files[i] , no);
                    node.add(no);
                    
                }
            }
            }catch(NullPointerException ex){ex.printStackTrace();}
        }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
                new Explorer().setVisible(true);
         
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboBox;
    private javax.swing.JList fileList;
    private javax.swing.JScrollPane listScrollPane;
    private javax.swing.JButton refreshButton;
    private javax.swing.JScrollPane treeScrollPane;
    // End of variables declaration//GEN-END:variables
}
