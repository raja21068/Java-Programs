import javax.microedition.lcdui.*;import javax.microedition.rms.*;public class ViewContacts implements CommandListener{	Alert alert;	Command back;	Command view;	Command delete;	Command edit;	Command save;		Display display;	Displayable parent;		Form editForm;		List list ;		RecordStore storeNames;	RecordStore storeNum;	RecordStore storeAdd;	RecordStore storeEmail;		TextField contactName,contactNo,contactAddress,contactEmail;		int[] ids; 	int updateId;		public ViewContacts(Display d ,Displayable p,RecordStore s,RecordStore no,RecordStore add,RecordStore em){		display = d;		parent = p; 		storeNames = s;		storeNum = no;		storeAdd = add;		storeEmail = em;				list = new List("Contacts",List.IMPLICIT);		back = new Command("back",Command.BACK,0);		view = new Command("view",Command.OK,0);		delete = new Command("delete",Command.OK,0);		edit = new Command("edit",Command.ITEM,0);		save = new Command("save",Command.ITEM,0);		alert = new Alert("");		editForm = new Form("Edit");		contactName = new TextField("Name: ","",12,TextField.ANY);		contactNo = new TextField("Number: ","",20,TextField.PHONENUMBER );		contactAddress = new TextField("Address: ","",20,TextField.ANY );		contactEmail = new TextField("Email: ","",20,TextField.ANY );				list.addCommand(back);		list.addCommand(view);		list.addCommand(delete);		list.addCommand(edit);		list.setCommandListener(this);				editForm.append(contactName);		editForm.append(contactNo);		editForm.append(contactAddress);		editForm.append(contactEmail);		editForm.addCommand(back);		editForm.addCommand(save);		editForm.setCommandListener(this);		}		public void show(){		list.deleteAll();		display.setCurrent(list);				try{		int num = storeNames.getNumRecords();		if(num <1){			alert.setTimeout(1000);			alert.setString("No any Contact..!");			display.setCurrent(alert,parent);		}else{			showRecords();		}		}catch(Exception ex){ex.printStackTrace();}	}		public void commandAction(Command c, Displayable d){		String label = c.getLabel();		if(label.equals("back")){			if(d == editForm){				display.setCurrent(list);			}			else{				display.setCurrent(parent);			}		}				try{						alert.setTimeout(Alert.FOREVER);							if(label.equals("view")){				viewContact();			}else if(label.equals("delete")){				deleteContact();						}else if(label.equals("edit")){				editContact();				display.setCurrent(editForm);			}else if(label.equals("save")){				updateContact();				show();			}					}catch(Exception ex){			alert.setString("Some Error Occured...");			display.setCurrent(alert);			ex.printStackTrace();		}			}		public void showRecords()throws Exception{		ids = new int[storeNames.getNumRecords()];				int index=0;				RecordEnumeration en = storeNames.enumerateRecords(null, null , false);// (RecordFilter rf, RecordComparator rc, boolean recordUpdate)				while(en.hasNextElement()){			int id = en.nextRecordId(); 			ids[index++] = id;			String s =  new String(storeNames.getRecord(id));			String n =  new String(storeNum.getRecord(id));						list.append(s+"\n"+n,null);				}			}		public void viewContact()throws Exception{		int index = list.getSelectedIndex();				byte[] nameBytes = storeNames.getRecord(ids[index]);		String name = "";		if(nameBytes != null){			name = new String(nameBytes);		}				String number = new String(storeNum.getRecord(ids[index]));				byte[] addressBytes = storeAdd.getRecord(ids[index]);		String address = "";		if(addressBytes != null){			address = new String(addressBytes);		}				byte[] emailBytes = storeEmail.getRecord(ids[index]);		String email = "";		if( emailBytes != null ){			email = new String(emailBytes);		}				alert.setString("Name:    "+name+"\nNumber:  "+number+"\nAddress: "+address+"\nEmail:   "+email);		display.setCurrent(alert);		}			public void deleteContact()throws Exception{		int index = list.getSelectedIndex();		storeNames.deleteRecord(ids[index]);		storeNum.deleteRecord(ids[index]);		storeAdd.deleteRecord(ids[index]);		storeEmail.deleteRecord(ids[index]);		show();	}		public void editContact()throws Exception{		int id = ids[list.getSelectedIndex()];				updateId = id;				byte[] name = storeNames.getRecord(id);		byte[] no = storeNum.getRecord(id);		byte[] address =  storeAdd.getRecord(id);		byte[] email = storeEmail.getRecord(id);			if(name != null){			contactName.setString(new String(name));					}		if(no != null){			contactNo.setString(new String(no));				}		if(address != null){			contactAddress.setString(new String(address));		}		if(email != null){			contactEmail.setString(new String(email));		}	}		public void updateContact()throws Exception{				storeNames.deleteRecord(updateId);		storeNum.deleteRecord(updateId);		storeAdd.deleteRecord(updateId);		storeEmail.deleteRecord(updateId);				String name = contactName.getString();		String no = contactNo.getString();		String addr = contactAddress.getString();		String email = contactEmail.getString();				byte[] na = name.getBytes();		byte[] num = no.getBytes();		byte[] add = addr.getBytes();		byte[] em = email.getBytes();						storeNames.addRecord(na,0,na.length);		storeNum.addRecord(num,0,num.length);		storeAdd.addRecord(add,0,add.length);		storeEmail.addRecord(em,0,em.length);				}}