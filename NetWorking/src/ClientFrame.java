import java.awt.FileDialog;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.*;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ClientFrame.java
 *
 * Created on Oct 6, 2012, 12:52:23 AM
 */
/**
 *
 * @author Jay Kumar
 */
public class ClientFrame extends javax.swing.JFrame {

    /** Creates new form ClientFrame */
    public ClientFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        ipLabel = new javax.swing.JLabel();
        ipText = new javax.swing.JTextField();
        browseBtn = new javax.swing.JButton();
        browseText = new javax.swing.JTextField();
        transferBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ipLabel.setText("Enter IP");

        ipText.setText("127.0.0.1");

        browseBtn.setText("Browse");
        browseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnActionPerformed(evt);
            }
        });

        transferBtn.setText("Transfer");
        transferBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ipLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ipText, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(browseBtn)
                            .addComponent(browseText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(transferBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipLabel)
                    .addComponent(ipText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(browseBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browseText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(transferBtn))
        );

        pack();
    }// </editor-fold>

    private void browseBtnActionPerformed(java.awt.event.ActionEvent evt) {
    	FileDialog dialog=new FileDialog(new javax.swing.JFrame(),"Save",FileDialog.LOAD);	
		dialog.show();												
		String s=dialog.getDirectory() + dialog.getFile();
		browseText.setText(s);
    }

    private void transferBtnActionPerformed(java.awt.event.ActionEvent evt) {
    	try{
    	Socket socket = new java.net.Socket(ipText.getText(),9090);
		System.out.println("connected...");
		java.io.File f = new java.io.File(browseText.getText());
		java.io.DataInputStream inFile = new java.io.DataInputStream(new java.io.FileInputStream(f));
		int fileSize = inFile.available();
		int packetSize = 10000;
		int totalPacket = fileSize / packetSize;
		int lastPacket = fileSize % packetSize;
		String fileName = f.getName();
		new Transfer(f , fileSize, packetSize, totalPacket , socket).start();
    	}catch(Exception e){}
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ClientFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify
    private javax.swing.JButton browseBtn;
    private javax.swing.JTextField browseText;
    private javax.swing.JLabel ipLabel;
    private javax.swing.JTextField ipText;
    private javax.swing.JButton transferBtn;
    // End of variables declaration
}
class Transfer extends Thread{
	String fileName;
	int fileSize;
	int packetSize;
	int totalPacket;
	int lastPacket;
	java.io.File f;
	java.io.DataOutputStream outForSocket;
	java.io.DataInputStream inFile ;
	java.net.Socket socket;
	Transfer(java.io.File file,int fileSize , int packSize , int totalPack ,java.net.Socket socket){
		f = file;
		this.fileName = file.getName();
		this.fileSize = fileSize;
		packetSize = packSize;
		this.totalPacket = totalPack;
		this.lastPacket = fileSize % packetSize;
		this.socket = socket;
		
		
		}
	public void run(){
		FileTransferDialog dialog = new FileTransferDialog();
		dialog.fileName.setText("File Name : "+fileName);
		dialog.fileSize.setText("File Size : "+fileSize);
		dialog.packetSize.setText("Packet Size : "+packetSize);
		dialog.totalPacket.setText("Total Packets : "+totalPacket);
		dialog.lastPacket.setText("Last Packet# : "+lastPacket);
		dialog.progressBar.setStringPainted(true);
		dialog.progressBar.setMinimum(0);
		dialog.progressBar.setValue(0);
		dialog.progressBar.setMaximum(totalPacket);
		dialog.setVisible(true);
		try {
			inFile = new java.io.DataInputStream(new java.io.FileInputStream(f));
			//outForSocket = new java.io.DataOutputStream(new java.io.FileOutputStream("D:/"+fileName));
			outForSocket = new java.io.DataOutputStream(socket.getOutputStream());	
			java.io.PrintStream print = new java.io.PrintStream(socket.getOutputStream());
			System.out.println(fileName);
			print.println(fileName);
			System.out.println(""+packetSize);
			print.println(""+packetSize);
			System.out.println(""+totalPacket);
			print.println(""+totalPacket);
			System.out.println(""+lastPacket);
			print.println(""+lastPacket);
				byte[] b = new byte[packetSize];
				for(int i =1; i<=totalPacket;i++){
					inFile.readFully(b, 0, b.length);
					outForSocket.write(b, 0, b.length);
					dialog.progressBar.setValue(i);
					dialog.transferPacket.setText("Transfer Packet# "+i);
					dialog.progressBar.setValue(i);
				}
				inFile.readFully(b,0,lastPacket);
				outForSocket.write(b,0,lastPacket);
				dialog.transferPacket.setText("Transfer Packet# "+(totalPacket+1));
				javax.swing.JOptionPane.showMessageDialog(null,"Copied succesfuly..");
				inFile.close();
				outForSocket.close();
				socket.close();
				dialog.dispose();
				this.stop();
		} 
		catch (FileNotFoundException e) {e.printStackTrace();}
		catch (IOException e){ e.printStackTrace(); }
		
	}
}

